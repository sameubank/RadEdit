/**
 * The protocol is used to reference HTTP/HTTPS URLs.
 * If we're inside a local file (debugging a unit test), we want to override and use HTTP for generated URLs.
 */
var PROTOCOL = location.protocol.replace(/file/, 'http')

/**
 * The User Agent string is used to test browser-specific support for some features.
 */
var USER_AGENT = navigator.userAgent.toLowerCase()

/**
 * Return true if it's a string.
 */
var isString = function(object) {
    trace('strings/isString')
    return typeof object == 'string'
}

/**
 * Trim the whitespace from a string.
 */
var trim = function(string) {
    trace('strings/trim')
    return string.replace(/^\s+|\s+$/g, '')
}

/**
 * Return true if the string contains the given substring.
 */
var containsString = function(string, substring) {
    trace('strings/containsString')
    return string.indexOf(substring) > -1
}

/**
 * Return a string, with asterisks replaced by values from a replacements array.
 */
var decorateString = function(string, replacements) {
    trace('strings/decorateString')
    forEach(replacements, function(replacement) {
        string = string.replace('*', replacement)
    })
    return string
}

/**
 * Reduce a string to its alphabetic characters.
 */
var alphabetic = function(string) {
    trace('strings/alphabetic')
    return string.replace(/[^a-z]/ig, '')
}

/**
 * Reduce a string to its numeric characters.
 */
var numeric = function(string) {
    trace('strings/numeric')
    return string.replace(/[^0-9]/g, '')
}

/**
 * Serialize an object to a string.
 */
var serialize = function(obj, delimiter) {
    trace('strings/serialize')
    var objType = obj.constructor.name
    delimiter = delimiter || '&'

    if (objType == 'Array') {
        return obj.join(delimiter)
    } else if (objType == 'Object') {
        var serializedArray = []
        forIn(obj, function(val, key) {
            serializedArray.push(key + '=' + val)
        })

        return serialize(serializedArray)
    }
}

/**
 * Returns a query string generated by serializing an object and joined using a delimiter (defaults to '&')
 */
var getQueryString = function(query, delimiter) {
    trace('helpers/generic/getQueryString')
    delimiter = delimiter || '&'
    var queryParams = []

    forEach(query, function(value, key) {
        queryParams.push(key + '=' + value)
    })

    return queryParams.join(delimiter)
}

/**
 * Return the browser version if the browser name matches or zero if it doesn't.
 */
var getBrowserVersionOrZero = function(browserName) {
    trace('helpers/generic/getBrowserVersionOrZero')
    var match = new RegExp(browserName + '[ /](\\d+(\\.\\d+)?)', 'i').exec(USER_AGENT)
    return match ? +match[1] : 0
}

// We need to know IE version to prevent HTTPS warnings for about:blank.
var ieVersion = getBrowserVersionOrZero('msie')

// We need to know Webkit version for Flash unloading.
var webkitVersion = getBrowserVersionOrZero('webkit')
